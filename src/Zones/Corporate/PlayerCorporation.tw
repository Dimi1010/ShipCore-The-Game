:: CreateCorporationWidget [widget nobr]
<<widget "CreateCorporation">>
  /* Parameters: Name, Credits, Debt, Location, Coherency */
  <<set _corporation to clone(setup.CorporationTemplate)>>
  <<set _corporation.CorpName to $args[0]>>
  <<set _corporation.CorpCredits to $args[1]>>
  <<set _corporation.CorpDebt to $args[2]>>
  <<set _corporation.CorpLocation to $args[3]>>
  <<set _corporation.CorpCoherency to $args[4]>>

  /* Add the new corporation to the player's corporations array */
  <<set $PlayerCorporations.push(_corporation)>>
<</widget>>

:: CreateDivisionWidget [widget nobr]
<<widget "CreateDivision">>
  /* Parameters: CorporationIndex, DivisionName, DivisionType, DivisionLevel, RequiredLicense, Coherency */
  <<set _division to clone(setup.ResourceExtractionTemplate)>>
  <<set _division.DivisionName to $args[1]>>
  <<set _division.DivisionType to $args[2]>>
  <<set _division.DivisionLevel to $args[3]>>
  <<set _division.DivisionRequiredLicense to $args[4]>>
  <<set _division.DivisionCoherency to $args[5]>>

  /* Validate CorporationIndex and add the division to the corporation's divisions array */
  <<if $args[0] gte 0 && $args[0] lt $PlayerCorporations.length>>
    <<set $PlayerCorporations[$args[0]].CorpDivisions.push(_division)>>
    <<run console.log("Division '" + _division.DivisionName + "' has been successfully created.")>>
  <<else>>
    <<run console.log("Error: Invalid CorporationIndex. Division creation failed.")>>
  <</if>>
<</widget>>

:: CorporationDefinitions [widget templates nobr]

<<set setup.SystemTemplate = {
  SystemName: "",
  SystemType: "", // e.g., "Frontier", "Core", "Void"
  FactionOwner: "",
  PlayerCorpActive: false,
  DevelopmentLevel: 0, // Scale to represent development 1-500
  DangerLevel: 500, // Scale to represent danger or security 1-1000
  EconomyLevel: 500, // Scale to represent economic strength 1-1000
  Population: 0,
  SunType: "", // e.g., "Red Giant", "White Dwarf"
  SunOutput: "", // e.g., "High", "Medium", "Low"
  SpecialFeatures: [], // Array of special features or attributes
  SystemEconomy: {
    BaseResourcePrices: {}, // Base prices for resources
    PriceModifiers: {}, // Modifiers based on local factors
    TradeRoutes: [], // Potential trade routes and their impact
    ResourceAbundance: {}, // Resource availability levels
  },
  SystemSecurity: {
    PatrolFrequency: 50, // Scale to represent frequency 1-100
    SecurityForces: [], // Array of security forces
    PiracyRisk: 50, // Scale to represent risk 1-100
  },
  SystemPolitics: {
    PlayerRelations: 50, // Local player relations
    PoliticalStability: 50, // Local relations with Faction Owner 1-100
  },
  SystemEnvironment: {
    PlanetaryBodies: [],
    NotableLocations: [],
    EnvironmentalHazards: []
  }
}>>

/* this needs shoved in storyinit before the setup.variables will become available, and they won't work with old savegames */

/* Division Types and Licenses */
<<set setup.DivisionTypes to ["Resource Extraction", "Services", "Industrial"]>>
<<set setup.CorpLicenseTypes to ["OrbitalHarvesting", "AsteroidProspecting", "CelestialBodyExtraction", "NAI-Tech"]>>

/* Corporation Template */
<<set setup.CorporationTemplate = {
  CorpName: "",
  CorpIsActive: true,
  CorpFinance, {credits: 0, debt: 0},
  CorpCredits: 0,
  CorpDebt: 0,
  CorpInventory: [],
  CorpProcessingSummary: {
    NewCredits: 0,
    NewDebt: 0,
    InventoryChanges: [],
    EventLog: []
  },
  CorpLocation: "",
  CorpLicenses: [],
  CorpDivisions: [],
  CorpCoherency: 0,
  CorpControllingNPC: []
}>>

/* Division Template */
<<set setup.DivisionTemplate = {
  DivisionName: "",
  DivisionIsActive: true,
  DivisionAutoSellActive: false,
  DivisionType: "",
  DivisionSubdivisions: [],
  DivisionFinance: {credits: 0, debt: 0},
  DivisionInventory: [],
  DivisionEmployees: [],
  DivisionControllingNPC: [],
  DivisionCoherency: 0,
  DivisionRequiredLicense: [],
  DivisionLevel: 1,
  DivisionEquipmentSlots: 1,
  DivisionRecipes: [],
  DivisionInstalledUpgrades: [],
  DivisionLog: {
    EventLog: [],
    InventoryChanges: [],
    FinanceChanges: []
  },
  DivisionBusinessStats: {
    RevenueBonus: 1,
    Efficiency: 1,
    BrandQuality: 1,
    InputConservation: 1,
    OutputEnhancement: 1,
    EmployeeProductivity: 1,
    MarketInfluence: 1,
    Corruption: 1,
    Security: 1
    ProtectedStorage: 0,
  }
}>>

/* Corporation Resource Base Prices Sheet */
<<set setup.CorpResources to {
  "Water": { baseValue: 200 },
  "Raw Ore": { baseValue: 200 },
  "Scrap": { baseValue: 200 },
  "Parts": { baseValue: 1000 },
  "Hydrogen": { baseValue: 200 },
  "Helium-3": { baseValue: 200 },
  "Minerals": { baseValue: 2000 },
  "Refined Metals": { baseValue: 2000 },
  "Processed Food": { baseValue: 2000 },
  "Consumer Goods": { baseValue: 5000 },
  "Luxury Goods": { baseValue: 25000 },
  "Heavy Mining Equipment": { baseValue: 25000 },
  "Fuel-Rods": { baseValue: 10000 },
  "Antimatter": { baseValue: 10000 },
  "Starship Parts": { baseValue: 35000 },
  "Artifacts": { baseValue: 50000 },
  "NAI-Tech": { baseValue: 15000000 },
  "Computronics": { baseValue: 1000000 },
  "Military Goods": { baseValue: 75000 },
  "Military Parts": { baseValue: 75000 },
  "Personal Weapons": { baseValue: 75000 },
  "Power-Armor Suits": { baseValue: 500000 },
  "Starship Weapons": { baseValue: 500000 },
  "Starship Equipment": { baseValue: 500000 },
  "Starship Hull Parts": { baseValue: 500000 },
  "Station Parts": { baseValue: 1000000 },
  "Orbital Infrastructure Parts": { baseValue: 1000000 },
  "Fusion Reactor Parts": { baseValue: 1000000 },
  "Cyberware": { baseValue: 150000 },
  "Industrial Components": { baseValue: 150000 }
}>>

/* Extraction Recipes List */
<<set setup.OrbitalHarvestingRecipes to [
    {
        Name: "Hydrogen Collection",
        Input: {ItemName: "Fuel Rods", Quantity: 2},
        Output: {ItemName: "Hydrogen", Quantity: 250}
    },
    {
        Name: "Helium-3 Collection",
        Input: {ItemName: "Fuel Rods", Quantity: 1},
        Output: {ItemName: "Helium-3", Quantity: 150}
    },
    {
        Name: "Water Synthesis",
        Input: {ItemName: "Fuel Rods", Quantity: 1},
        Output: {ItemName: "Water", Quantity: 100}
    },
    {
        Name: "Antimatter Synthesis",
        Input: {ItemName: "Fuel Rods", Quantity: 8},
        Output: {ItemName: "Antimatter", Quantity: 10}
    }
]>>

<<set setup.AsteroidProspectingRecipes to [
  {
    Name: "Ore Mining",
    Input: {ItemName: "Fuel Rods", Quantity: 1},
    Output: {ItemName: "Raw Ore", Quantity: 75}
  },
  {
    Name: "Ice Mining",
    Input: {ItemName: "Fuel Rods", Quantity: 1},
    Output: {ItemName: "Water", Quantity: 60}
  }
]>>

<<set setup.CelestialBodyExtractionRecipes to [
  {
    Name: "Surface Ore Mining",
    Input: {ItemName: "Fuel Rods", Quantity: 2},
    Output: {ItemName: "Raw Ore", Quantity: 200}
  },
  {
    Name: "Water Extraction",
    Input: {ItemName: "Fuel Rods", Quantity: 2},
    Output: {ItemName: "Water", Quantity: 80}
  },
  {
    Name: "Hydrogen Extraction",
    Input: {ItemName: "Fuel Rods", Quantity: 1},
    Output: {ItemName: "Hydrogen", Quantity: 40}
  },
  {
    Name: "Mineral Harvesting",
    Input: {ItemName: "Fuel Rods", Quantity: 2},
    Output: {ItemName: "Minerals", Quantity: 20}
  }
]>>

<<set setup.IndustrialProductionRecipes to [
  {
    name: "Refined Metal Production",
    inputs: [{itemName: "Raw Ore", quantity: 20}],
    outputs: [{itemName: "Refined Metals", quantity: 10}],
    badge: "None"
  },
  {
    name: "Fuel Rod Production",
    inputs: [{itemName: "Helium-3", quantity: 12}, {itemName: "Antimatter", quantity: 2}],
    outputs: [{itemName: "Fuel-Rods", quantity: 4}],
    badge: "None"
  },
  {
    name: "Processed Food Production",
    inputs: [{itemName: "Water", quantity: 6}, {itemName: "Minerals", quantity: 4}],
    outputs: [{itemName: "Processed Food", quantity: 15}],
    badge: "None"
  },
  {
    name: "Basic Consumer Goods Production",
    inputs: [{itemName: "Refined Metals", quantity: 2}, {itemName: "Water", quantity: 10}, {itemName: "Parts", quantity: 5}],
    outputs: [{itemName: "Consumer Goods", quantity: 5}],
    badge: "None"
  },
  {
    name: "Luxury Goods Production",
    inputs: [{itemName: "Consumer Goods", quantity: 3}, {itemName: "Refined Metals", quantity: 1}],
    outputs: [{itemName: "Luxury Goods", quantity: 1}],
    badge: "None"
  },
  {
    name: "Parts Production",
    inputs: [{itemName: "Refined Metals", quantity: 5}],
    outputs: [{itemName: "Parts", quantity: 5}],
    badge: "None"
  }
]>>/* ... Add any additional recipes with no badge */

<<set setup.HeavyIndustryProductionRecipes to [
  {
    name: "Heavy Equipment Manufacturing",
    inputs: [{itemName: "Refined Metals", quantity: 11}, {itemName: "Fuel-Rods", quantity: 4}, {itemName: "Parts", quantity: 11}],
    outputs: [{itemName: "Heavy Mining Equipment", quantity: 4}],
    badge: "Heavy Industry"
  },
  {
    name: "Starship Part Assembly",
    inputs: [{itemName: "Refined Metals", quantity: 9}, {itemName: "Cyberware", quantity: 1}],
    outputs: [{itemName: "Starship Parts", quantity: 5}],
    badge: "Heavy Industry"
  },
  {
    name: "Starship Equipment Production",
    inputs: [{itemName: "Starship Parts", quantity: 4}, {itemName: "Cyberware", quantity: 2}],
    outputs: [{itemName: "Starship Equipment", quantity: 1}],
    badge: "Heavy Industry"
  },
  {
    name: "Starship Hull Fabrication",
    inputs: [{itemName: "Refined Metals", quantity: 92}, {itemName: "Industrial Components", quantity: 15}],
    outputs: [{itemName: "Starship Hull Parts", quantity: 5}],
    badge: "Heavy Industry"
  },
  {
    name: "Industrial Component Manufacturing",
    inputs: [{itemName: "Refined Metals", quantity: 25}, {itemName: "Fuel-Rods", quantity: 8}],
    outputs: [{itemName: "Industrial Components", quantity: 1}],
    badge: "Heavy Industry"
  }
]>>/* ... Add any additional recipes with the badge "Heavy Industry" */

<<set setup.HighTechIndustryProductionRecipes to [
  {
    name: "Antimatter Synthesis",
    inputs: [{itemName: "Hydrogen", quantity: 55}, {itemName: "Helium-3", quantity: 55}],
    outputs: [{itemName: "Antimatter", quantity: 4}],
    badge: "High-Tech Industry"
  },
  {
    name: "Cyberware Production",
    inputs: [{itemName: "Minerals", quantity: 25}, {itemName: "Refined Metals", quantity: 25}, {itemName: "Parts", quantity: 25}],
    outputs: [{itemName: "Cyberware", quantity: 1}],
    badge: "High-Tech Industry"
  },
  {
    name: "NAI-Tech Fabrication",
    inputs: [{itemName: "Refined Metals", quantity: 7}, {itemName: "Computronics", quantity: 14}, {itemName: "Parts", quantity: 255}, {itemName: "Refined Metals", quantity: 1000}],
    outputs: [{itemName: "NAI-Tech", quantity: 1}],
    badge: "High-Tech Industry"
  },
  {
    name: "Computronics Circuitry",
    inputs: [{itemName: "Refined Metals", quantity: 244}, {itemName: "Minerals", quantity: 244}],
    outputs: [{itemName: "Computronics", quantity: 1}],
    badge: "High-Tech Industry"
  },
  {
    name: "Fusion Reactor Part Manufacturing",
    inputs: [{itemName: "Fuel-Rods", quantity: 78}, {itemName: "Heavy Mining Equipment", quantity: 8}],
    outputs: [{itemName: "Fusion Reactor Parts", quantity: 1}],
    badge: "High-Tech Industry"
  }
]>>/* ... Add any additional recipes with the badge "High-Tech Ind" */

<<set setup.MilitaryIndustryProductionRecipes to [
  {
    name: "Military Goods Manufacturing",
    inputs: [{itemName: "Refined Metals", quantity: 66}, {itemName: "Fuel-Rods", quantity: 22}],
    outputs: [{itemName: "Military Goods", quantity: 5}],
    badge: "Military Industry"
  },
  {
    name: "Military Parts Production",
    inputs: [{itemName: "Military Goods", quantity: 5}, {itemName: "Cyberware", quantity: 7}, {itemName: "Refined Metals", quantity: 10}],
    outputs: [{itemName: "Military Parts", quantity: 20}],
    badge: "Military Industry"
  },
  {
    name: "Personal Weapons Fabrication",
    inputs: [{itemName: "Military Parts", quantity: 9}, {itemName: "Refined Metals", quantity: 33}],
    outputs: [{itemName: "Personal Weapons", quantity: 10}],
    badge: "Military Industry"
  },
  {
    name: "Power-Armor Suit Assembly",
    inputs: [{itemName: "Military Goods", quantity: 45}, {itemName: "Cyberware", quantity: 4}, {itemName: "Refined Metals", quantity: 7}],
    outputs: [{itemName: "Power-Armor Suits", quantity: 8}],
    badge: "Military Industry"
  },
  {
    name: "Starship Weapons Manufacturing",
    inputs: [{itemName: "Starship Parts", quantity: 7}, {itemName: "Military Parts", quantity: 3}],
    outputs: [{itemName: "Starship Weapons", quantity: 1}],
    badge: "Military Industry"
  }
]>>/* ... Add any additional recipes with the badge "Military Industry" */

<<set setup.OrbitalIndustryProductionRecipes to [
  {
    name: "Space Station Parts Production",
    inputs: [{itemName: "Starship Hull Parts", quantity: 7}, {itemName: "Orbital Infrastructure Parts", quantity: 10}, {itemName: "Refined Metals", quantity: 300}],
    outputs: [{itemName: "Station Parts", quantity: 14}],
    badge: "Orbital Industry"
  },
  {
    name: "Orbital Infrastructure Assembly",
    inputs: [{itemName: "Starship Equipment", quantity: 10}, {itemName: "Fusion Reactor Parts", quantity: 1}, {itemName: "Refined Metals", quantity: 10}],
    outputs: [{itemName: "Orbital Infrastructure Parts", quantity: 6}],
    badge: "Orbital Industry"
  }
]>>/* ... Add any additional recipes with the badge "Orbital Industry" */

<<set setup.RecyclingIndustryProductionRecipes to [
  {
    name: "Scrap Processing",
    inputs: [{itemName: "Scrap", quantity: 5}],
    outputs: [{itemName: "Refined Metals", quantity: 10}],
    badge: "Recycling"
  }
]>>/*  ... Add any additional recipes with the badge "Recycling" */



:: CorporateProcessing [widget nobr]
<<widget "ConsumeInputWithChance">>
  <<set _input to $args[0]>>
  <<set _chance to $args[1]>>
  <<set _divisionInventory to $args[2]>>
  <<set _corpInventory to $args[3]>>
  <<set _resourceName to _input.name>>
  <<set _quantityNeeded to _input.quantity>>

  <<for _i = 0; _i < _quantityNeeded; _i++>> <!-- Loop through each required unit of the resource -->
    <<if Math.random() * 100 > _chance>> <!-- Check for resource conservation -->
      /* Try to consume resource from division inventory */
      <<set _resourceIndex = _divisionInventory.findIndex(item => item.name === _resourceName && item.quantity > 0)>>
      <<if _resourceIndex gte 0>> <!-- Resource found in division inventory -->
        <<set _divisionInventory[_resourceIndex].quantity -= 1>>
      <<else>>
        /* Try to consume resource from corporation inventory */
        <<set _resourceIndex = _corpInventory.findIndex(item => item.name === _resourceName && item.quantity > 0)>>
        <<if _resourceIndex gte 0>> <!-- Resource found in corporation inventory -->
          <<set _corpInventory[_resourceIndex].quantity -= 1>>
        <<else>> <!-- Resource not available -->
          <<set _canProcessRecipe = false>>
          <<break>>
        <</if>>
      <</if>>
    <</if>>
  <</for>>
<</widget>>



<<widget "ProduceOutputWithChance">>
  <<set _output to $args[0]>>
  <<set _chance to $args[1]>>
  <<set _divisionInventory to $args[2]>>
  <<set _resourceName to _output.name>>
  <<set _baseQuantity to _output.quantity>>
  <<set _extraQuantity to (Math.random() * 100 <= _chance) ? 1 : 0>> <!-- Chance for output enhancement -->
  <<set _totalQuantity to _baseQuantity + _extraQuantity>>

  /* Add the total output quantity to the division's inventory */
  <<set _resourceFound = false>>
  <<for _item range _divisionInventory>>
    <<if _item.name is _resourceName>>
      <<set _item.quantity += _totalQuantity>>
      <<set _resourceFound = true>>
      <<break>>
    <</if>>
  <</for>>
  /* If the resource is not already in the inventory, add it */
  <<if not _resourceFound>>
    <<set _divisionInventory.push({name: _resourceName, quantity: _totalQuantity})>>
  <</if>>
<</widget>>


<<widget "ManageOutputs">>
  <<set _currentDivision to $args[0]>>
  <<set _currentCorp to $args[1]>>
  <<set _autoSellEnabled to _currentDivision.DivisionAutoSellActive>>
  <<set _outputs to _currentDivision.ProcessedOutputs>>

  <<for _output in _outputs>>
    <<set _outputName to _output.name>>
    <<set _outputQuantity to _output.quantity>>

    <<if _autoSellEnabled>>
      <<ProcessDivisionSale _outputName _outputQuantity _currentCorp>>
    <<else>>
      <<run AddResource(_outputName, _outputQuantity, _currentCorp.CorpInventory)>>
      <<run LogResourceStored(_outputName, _outputQuantity)>>
    <</if>>
  <</for>>
<</widget>>

<<widget "ProcessDivisionSale">>
  <<set _resourceName to $args[0]>>
  <<set _quantity to $args[1]>>
  <<set _corp to $args[2]>>
  <<set _systemEconomy to ...>> <!-- Retrieve the system economy object based on CorpLocation -->
  
  /* Calculate price based on base value and system's price modifier */
  <<set _baseValue to setup.CorpResources[_resourceName].baseValue>>
  <<set _priceModifier to _systemEconomy.ResourcePriceModifiers[_resourceName]>>
  <<set _sellingPrice to _baseValue * _priceModifier * _quantity>>

  /* Adjust corporation's finances */
  <<set _corp.CorpFinance.credits += _sellingPrice>>
  <<run LogSale _resourceName _quantity _sellingPrice>>
<</widget>>



<<widget "LogEvent">>
  <<set _division to $args[0]>>
  <<set _eventDescription to $args[1]>>

  <<run _division.DivisionLog.EventLog.push({
    timestamp: new Date($gameDate.getTime()),
    description: _eventDescription
  })>>
<</widget>>

<<widget "LogInventoryChange">>
  <<set _division to $args[0]>>
  <<set _itemName to $args[1]>>
  <<set _changeQuantity to $args[2]>>
  <<set _changeType to $args[3]>>

  <<run _division.DivisionLog.InventoryChanges.push({
    timestamp: new Date($gameDate.getTime()),
    item: _itemName,
    quantity: _changeQuantity,
    type: _changeType // 'add' or 'remove'
  })>>
<</widget>>



<<widget "ProcessCorporationCycles">>
  /* Initialize current time based on the game's date */
  <<set _currentTime to new Date($gameDate.getTime())>>

  /* Retrieve the last processing time for corporations */
  <<set _lastCorpTime to new Date($CorporationPlayerBusinessLastTime.getTime())>>

  /* Calculate the time passed since the last processing */
  <<set _millisecondsPassed to _currentTime.getTime() - _lastCorpTime.getTime()>>
  <<set _daysPassed to Math.floor(_millisecondsPassed / (24 * 60 * 60 * 1000))>> <!-- Convert milliseconds to days -->

  /* Check if at least one day has passed to proceed with processing */
  <<if _daysPassed >= 1>>
    /* Loop through each day that has passed */
    <<for _day = 0; _day < _daysPassed; _day++>>

      /* Iterate over each corporation */
      <<for _i = 0; _i < $PlayerCorporations.length; _i++>>
        <<set _currentCorp to $PlayerCorporations[_i]>>

        /* Check the state of the corporation before processing */
        <<if _currentCorp.CorpIsActive>> <!-- Check if the corporation is active -->

          /* Iterate over each division of the current corporation */
          <<for _j = 0; _j < _currentCorp.CorpDivisions.length; _j++>>
            <<set _currentDivision to _currentCorp.CorpDivisions[_j]>>
            <<set _stats to _currentDivision.DivisionBusinessStats>>

            /* Check if the division has recipes and is in an active state */
            <<if _currentDivision.DivisionIsActive and _currentDivision.DivisionRecipes.length > 0>>

              /* Process each recipe in the division */
              <<for _recipe in _currentDivision.DivisionRecipes>>
                <<set _canProcessRecipe to true>>
                <<set _requiredInputs to _recipe.Inputs>>
                <<set _producedOutputs to _recipe.Outputs>>

                /* Check and consume inputs with a chance for conservation */
                <<for _input in _requiredInputs>>
                  <<set _inputConservationChance to (_stats.InputConservation - 1) * 100>>
                  <<ConsumeInputWithChance _input _inputConservationChance _currentDivision.DivisionInventory _currentCorp.CorpInventory>>
                  <<if not _canProcessRecipe>>
                    <<LogEvent _currentDivision "Insufficient resources for recipe: " + _recipe.Name>>
                    <<break>> <!-- Exit if input is not available -->
                  <</if>>
                <</for>>

                /* Produce outputs with a chance for enhancement */
                <<if _canProcessRecipe>>
                  <<for _output in _producedOutputs>>
                    <<set _outputEnhancementChance to (_stats.OutputEnhancement - 1) * 100>>
                    <<ProduceOutputWithChance _output _outputEnhancementChance _currentDivision.DivisionInventory>>
                  <</for>>

                  /* Auto-sell or store the outputs based on the division's configuration */
                  <<ManageOutputs _currentDivision _currentCorp>>

                <<else>>
                  /* Log a message if the recipe cannot be processed due to insufficient resources */
                  <<run console.log("Insufficient resources for recipe: " + _recipe.Name + " on day " + (_day + 1))>>
                <</if>>
              <</for>> <!-- End of recipe processing loop -->
            <</if>> <!-- End check for division having recipes and being active -->

          <</for>> <!-- End of division processing loop -->
        <</if>> <!-- End check for corporation being active -->

      <</for>> <!-- End of corporation processing loop -->
    <</for>> <!-- End of daily processing loop -->

    /* Update the last processing time to the current time */
    <<set $CorporationPlayerBusinessLastTime to new Date(_currentTime.getTime())>>

  <<else>>
    /* Log if no processing is done due to insufficient time passage */
    <<run console.log("Less than a day has passed. Skipping corporation cycle processing.")>>
  <</if>>
<</widget>>







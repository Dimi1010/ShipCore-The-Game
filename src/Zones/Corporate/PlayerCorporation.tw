:: CreateCorporationWidget [widget nobr]
<<widget "CreateCorporation">>
  /* Initialize $PlayerCorporations if it's not already an array */
  <<if not Array.isArray($PlayerCorporations)>>
    <<set $PlayerCorporations = []>>
  <</if>>

  /* Parameters: Name, Credits, Debt, Location, Coherency */
  <<set _corporationName to $args[0]>>
  <<set _corporationLocation to $args[3]>>

  /* Check for duplicate corporation name or location */
  <<set _isDuplicate = false>>
  <<for _corp range $PlayerCorporations>>
    <<if _corp.CorpName == _corporationName || _corp.CorpLocation == _corporationLocation>>
      <<set _isDuplicate = true>>
      <<break>>
    <</if>>
  <</for>>

  <<if not _isDuplicate>>
    <<set _corporation = clone(setup.CorporationTemplate)>>
    <<set _corporation.CorpName to _corporationName>>
    <<set _corporation.CorpCredits to $args[1]>>
    <<set _corporation.CorpDebt to $args[2]>>
    <<set _corporation.CorpLocation to _corporationLocation>>
    <<set _corporation.CorpCoherency to $args[4]>>
    <<set _corporation.CorpDivisions = []>>  <!-- Initialize CorpDivisions array within the corporation -->

    /* Add the new corporation to the player's corporations array */
    <<set $PlayerCorporations.push(_corporation)>>

    /* Debugging: Log the new corporation */
    <<run console.log("New corporation created:", _corporation)>>
  <<else>>
    /* Log error for duplicate corporation */
    <<run console.log("Error: Corporation with name '" + _corporationName + "' or location '" + _corporationLocation + "' already exists.")>>
  <</if>>

  /* Debugging: Log the updated $PlayerCorporations array */
  <<run console.log("$PlayerCorporations array after operation:", $PlayerCorporations)>>
<</widget>>



:: CreateDivisionWidget [widget nobr]
<<widget "CreateDivision">>
  /* Parameters: CorporationIndex, DivisionName, DivisionType, DivisionLevel, RequiredLicense, Coherency */
  <<set _corpIndex to $args[0]>>
  <<set _divisionName to $args[1]>>
  <<set _divisionType to $args[2]>>
  <<set _divisionLevel to $args[3]>>
  <<set _divisionRequiredLicense to $args[4]>>
  <<set _divisionCoherency to $args[5]>>

  /* Validate CorporationIndex */
  <<if _corpIndex gte 0 && _corpIndex lt $PlayerCorporations.length>>
    /* Check for duplicate division name and type within the corporation */
    <<set _isDuplicateDivision = false>>
    <<for _div range $PlayerCorporations[_corpIndex].CorpDivisions>>
      <<if _div.DivisionName == _divisionName && _div.DivisionType == _divisionType>>
        <<set _isDuplicateDivision = true>>
        <<break>>
      <</if>>
    <</for>>

    <<if not _isDuplicateDivision>>
      /* Attempt to clone the division template */
      <<set _division = clone(setup.DivisionTemplate)>>
      <<if _division>> <!-- Check if _division is successfully cloned -->
        <<set _division.DivisionName to _divisionName>>
        <<set _division.DivisionType to _divisionType>>
        <<set _division.DivisionLevel to _divisionLevel>>
        <<set _division.DivisionRequiredLicense to _divisionRequiredLicense>>
        <<set _division.DivisionCoherency to _divisionCoherency>>
        <<set $PlayerCorporations[_corpIndex].CorpDivisions.push(_division)>>
        <<run console.log("Division created:", _division)>>
      <<else>>
        <<run console.log("Error: Failed to clone division template.")>>
      <</if>>
    <<else>>
      <<run console.log("Error: Duplicate division name and type detected.")>>
    <</if>>
  <<else>>
    <<run console.log("Error: Invalid CorporationIndex.")>>
  <</if>>
<</widget>>




:: CorporateProcessing [widget nobr]
<<widget "ConsumeInputWithChance">>
  <<set _input to $args[0]>>
  <<run console.log("ConsumeInputWithChance: Input:", _input)>>
  <<set _chance to $args[1]>>
  <<run console.log("ConsumeInputWithChance: Chance:", _chance)>>
  <<set _divisionInventory to $args[2]>>
  <<run console.log("ConsumeInputWithChance: Division Inventory:", _divisionInventory)>>
  <<set _corpInventory to $args[3]>>
  <<run console.log("ConsumeInputWithChance: Corporation Inventory:", _corpInventory)>>
  <<set _resourceName to _input.name>>
  <<set _quantityNeeded to _input.quantity>>
  <<run console.log("ConsumeInputWithChance: Resource Name:", _resourceName, "Quantity Needed:", _quantityNeeded)>>

  <<for _i = 0; _i < _quantityNeeded; _i++>> <!-- Loop through each required unit of the resource -->
    <<if Math.random() * 100 > _chance>> <!-- Check for resource conservation -->
      <<run console.log("ConsumeInputWithChance: Loop Iteration", _i, "Random Check Passed")>>
      /* Try to consume resource from division inventory */
      <<set _resourceIndex = _divisionInventory.findIndex(item => item.name === _resourceName && item.quantity > 0)>>
      <<if _resourceIndex gte 0>> <!-- Resource found in division inventory -->
        <<set _divisionInventory[_resourceIndex].quantity -= 1>>
        <<run console.log("ConsumeInputWithChance: Consumed from Division Inventory", _divisionInventory)>>
      <<else>>
        /* Try to consume resource from corporation inventory */
        <<set _resourceIndex = _corpInventory.findIndex(item => item.name === _resourceName && item.quantity > 0)>>
        <<if _resourceIndex gte 0>> <!-- Resource found in corporation inventory -->
          <<set _corpInventory[_resourceIndex].quantity -= 1>>
          <<run console.log("ConsumeInputWithChance: Consumed from Corporation Inventory", _corpInventory)>>
        <<else>> <!-- Resource not available -->
          <<set _canProcessRecipe = false>>
          <<run console.log("ConsumeInputWithChance: Resource not available")>>
          <<break>>
        <</if>>
      <</if>>
    <</if>>
  <</for>>
<</widget>>




<<widget "ProduceOutputWithChance">>
  <<set _output to $args[0]>>
  <<run console.log("ProduceOutputWithChance: Output:", _output)>>
  <<set _chance to $args[1]>>
  <<run console.log("ProduceOutputWithChance: Chance:", _chance)>>
  <<set _divisionInventory to $args[2]>>
  <<run console.log("ProduceOutputWithChance: Division Inventory before:", _divisionInventory)>>
  <<set _resourceName to _output.name>>
  <<set _baseQuantity to _output.quantity>>
  <<set _extraQuantity to (Math.random() * 100 <= _chance) ? 1 : 0>> <!-- Chance for output enhancement -->
  <<set _totalQuantity to _baseQuantity + _extraQuantity>>
  <<run console.log("ProduceOutputWithChance: Resource Name:", _resourceName, "Base Quantity:", _baseQuantity, "Extra Quantity:", _extraQuantity)>>

  /* Add the total output quantity to the division's inventory */
  <<set _resourceFound = false>>
  <<for _item range _divisionInventory>>
    <<if _item.name is _resourceName>>
      <<set _item.quantity += _totalQuantity>>
      <<set _resourceFound = true>>
      <<run console.log("ProduceOutputWithChance: Added to Inventory", _item)>>
      <<break>>
    <</if>>
  <</for>>
  /* If the resource is not already in the inventory, add it */
  <<if not _resourceFound>>
    <<set _divisionInventory.push({name: _resourceName, quantity: _totalQuantity})>>
    <<run console.log("ProduceOutputWithChance: New Resource Added", _resourceName, _totalQuantity)>>
  <</if>>
<</widget>>



<<widget "ManageOutputs">>
  <<set _currentDivision to $args[0]>
  <<run console.log("ManageOutputs: Current Division:", _currentDivision)>>
  <<set _currentCorp to $args[1]>>
  <<run console.log("ManageOutputs: Current Corporation:", _currentCorp)>>
  <<set _autoSellEnabled to _currentDivision.DivisionAutoSellActive>>
  <<set _outputs to _currentDivision.ProcessedOutputs>>
  <<run console.log("ManageOutputs: AutoSell Enabled:", _autoSellEnabled, "Outputs:", _outputs)>>

  <<for _output in _outputs>>
    <<set _outputName to _output.name>>
    <<set _outputQuantity to _output.quantity>>
    <<run console.log("ManageOutputs: Processing Output", _outputName, "Quantity:", _outputQuantity)>>

    <<if _autoSellEnabled>>
      <<run console.log("ManageOutputs: AutoSell Enabled for", _outputName)>>
      <<ProcessDivisionSale _outputName _outputQuantity _currentCorp>>
    <<else>>
      <<run console.log("ManageOutputs: Adding Resource to Inventory", _outputName, "Quantity:", _outputQuantity)>>
      <<run AddResource(_outputName, _outputQuantity, _currentCorp.CorpInventory)>>
      <<run LogResourceStored(_outputName, _outputQuantity)>>
    <</if>>
  <</for>>
<</widget>>

<<widget "ProcessDivisionSale">>
  <<set _resourceName to $args[0]>>
  <<set _quantity to $args[1]>>
  <<set _corp to $args[2]>>
  <<run console.log("ProcessDivisionSale: Resource", _resourceName, "Quantity:", _quantity, "Corp:", _corp)>>
  <<set _systemEconomy to ...>> <!-- Retrieve the system economy object based on CorpLocation -->
  <<run console.log("ProcessDivisionSale: System Economy", _systemEconomy)>>
  
  /* Calculate price based on base value and system's price modifier */
  <<set _baseValue to setup.CorpResources[_resourceName].baseValue>>
  <<set _priceModifier to _systemEconomy.ResourcePriceModifiers[_resourceName]>>
  <<set _sellingPrice to _baseValue * _priceModifier * _quantity>>
  <<run console.log("ProcessDivisionSale: Selling Price", _sellingPrice)>>

  /* Adjust corporation's finances */
  <<set _corp.CorpFinance.credits += _sellingPrice>>
  <<run LogSale _resourceName _quantity _sellingPrice>>
<</widget>>

<<widget "LogEvent">>
  <<set _division to $args[0]>>
  <<set _eventDescription to $args[1]>>
  <<run console.log("LogEvent: Division", _division, "Event Description:", _eventDescription)>>

  <<run _division.DivisionLog.EventLog.push({
    timestamp: new Date($gameDate.getTime()),
    description: _eventDescription
  })>>
<</widget>>

<<widget "LogInventoryChange">>
  <<set _division to $args[0]>>
  <<set _itemName to $args[1]>>
  <<set _changeQuantity to $args[2]>>
  <<set _changeType to $args[3]>>
  <<run console.log("LogInventoryChange: Division", _division, "Item Name:", _itemName, "Change Quantity:", _changeQuantity, "Change Type:", _changeType)>>

  <<run _division.DivisionLog.InventoryChanges.push({
    timestamp: new Date($gameDate.getTime()),
    item: _itemName,
    quantity: _changeQuantity,
    type: _changeType // 'add' or 'remove'
  })>>
<</widget>>


<<widget "ProcessDivisionSale">>
  <<set _resourceName to $args[0]>>
  <<set _quantity to $args[1]>>
  <<set _corp to $args[2]>>
  <<set _systemEconomy to ...>> <!-- Retrieve the system economy object based on CorpLocation -->
  
  /* Calculate price based on base value and system's price modifier */
  <<set _baseValue to setup.CorpResources[_resourceName].baseValue>>
  <<set _priceModifier to _systemEconomy.ResourcePriceModifiers[_resourceName]>>
  <<set _sellingPrice to _baseValue * _priceModifier * _quantity>>

  /* Adjust corporation's finances */
  <<set _corp.CorpFinance.credits += _sellingPrice>>
  <<run LogSale _resourceName _quantity _sellingPrice>>
<</widget>>



<<widget "LogEvent">>
  <<set _division to $args[0]>>
  <<set _eventDescription to $args[1]>>

  <<run _division.DivisionLog.EventLog.push({
    timestamp: new Date($gameDate.getTime()),
    description: _eventDescription
  })>>
<</widget>>

<<widget "LogInventoryChange">>
  <<set _division to $args[0]>>
  <<set _itemName to $args[1]>>
  <<set _changeQuantity to $args[2]>>
  <<set _changeType to $args[3]>>

  <<run _division.DivisionLog.InventoryChanges.push({
    timestamp: new Date($gameDate.getTime()),
    item: _itemName,
    quantity: _changeQuantity,
    type: _changeType // 'add' or 'remove'
  })>>
<</widget>>



:: ProcessCorporationCycles [widget nobr]
<<widget "ProcessCorporationCycles">>
  <<run console.log("Starting ProcessCorporationCycles widget.")>>

  /* Ensure $CorporationPlayerBusinessLastTime is initialized based on the game's date system */
  <<if typeof $CorporationPlayerBusinessLastTime === 'undefined' || !$CorporationPlayerBusinessLastTime>>
    <<set $CorporationPlayerBusinessLastTime = new Date($gameDate.getTime())>> <!-- Initialize based on the current game date -->
    <<run console.log("Initializing $CorporationPlayerBusinessLastTime to game date.")>>
  <</if>>

  <<run console.log("Current game date:", $gameDate)>>

  /* Initialize current time based on the game's date */
  <<set _currentTime to new Date($gameDate.getTime())>>
  <<run console.log("Current processing time:", _currentTime)>>

  /* Retrieve the last processing time for corporations */
  <<set _lastCorpTime to new Date($CorporationPlayerBusinessLastTime.getTime())>>
  <<run console.log("Last corporation processing time:", _lastCorpTime)>>

  /* Calculate the time passed since the last processing */
  <<set _millisecondsPassed to _currentTime.getTime() - _lastCorpTime.getTime()>>
  <<set _daysPassed to Math.floor(_millisecondsPassed / (24 * 60 * 60 * 1000))>> <!-- Convert milliseconds to days -->
  <<run console.log("Days passed since last processing:", _daysPassed)>>

  /* Check if at least one day has passed to proceed with processing */
  <<if _daysPassed >= 1>>
    <<run console.log("Processing corporation cycles for", _daysPassed, "days.")>>
    /* Loop through each day that has passed */
    <<for _day = 0; _day < _daysPassed; _day++>>
      <<run console.log("Processing day", _day + 1, "of", _daysPassed)>> 

      /* Iterate over each corporation */
      <<for _i = 0; _i < $PlayerCorporations.length; _i++>>
        <<set _currentCorp to $PlayerCorporations[_i]>>
        <<run console.log("Processing corporation:", _currentCorp.CorpName)>> 

        /* Check the state of the corporation before processing */
        <<if _currentCorp.CorpIsActive>> <!-- Check if the corporation is active -->
          <<run console.log("Corporation is active. Processing divisions.")>>

          /* Iterate over each division of the current corporation */
          <<for _j = 0; _j < _currentCorp.CorpDivisions.length; _j++>>
            <<set _currentDivision to _currentCorp.CorpDivisions[_j]>>
            <<set _stats to _currentDivision.DivisionBusinessStats>>
            <<run console.log("Processing division:", _currentDivision.DivisionName)>>

            /* Check if the division has recipes and is in an active state */
            <<if _currentDivision.DivisionIsActive and _currentDivision.DivisionRecipes.length > 0>>
              <<run console.log("Division is active and has recipes. Processing recipes.")>>

              /* Process each recipe in the division */
              <<for _recipe in _currentDivision.DivisionRecipes>>
                <<set _canProcessRecipe to true>>
                <<set _requiredInputs to _recipe.Inputs>>
                <<set _producedOutputs to _recipe.Outputs>>
                <<run console.log("Processing recipe:", _recipe.Name)>>
                /* Check and consume inputs with a chance for conservation */
                <<for _input in _requiredInputs>>
                  <<set _inputConservationChance to (_stats.InputConservation - 1) * 100>>
                  <<ConsumeInputWithChance _input _inputConservationChance _currentDivision.DivisionInventory _currentCorp.CorpInventory>>
                  <<if not _canProcessRecipe>>
                    <<LogEvent _currentDivision "Insufficient resources for recipe: " + _recipe.Name>>
                    <<run console.log("Insufficient resources for recipe:", _recipe.Name, "on day", _day + 1)>>
                    <<break>> <!-- Exit if input is not available -->
                  <</if>>
                <</for>>

            /* Produce outputs with a chance for enhancement */
            <<if _canProcessRecipe>>
              <<run console.log("Sufficient resources available. Producing outputs for recipe:", _recipe.Name)>>
              <<for _output in _producedOutputs>>
                <<set _outputEnhancementChance to (_stats.OutputEnhancement - 1) * 100>>
                <<ProduceOutputWithChance _output _outputEnhancementChance _currentDivision.DivisionInventory>>
              <</for>>

              /* Auto-sell or store the outputs based on the division's configuration */
              <<ManageOutputs _currentDivision _currentCorp>>

            <<else>>
              /* Log a message if the recipe cannot be processed due to insufficient resources */
              <<run console.log("Skipping recipe due to insufficient resources:", _recipe.Name, "on day", _day + 1)>>
            <</if>>
          <</for>> <!-- End of recipe processing loop -->
        <<else>>
          <<run console.log("Division inactive or no recipes available:", _currentDivision.DivisionName)>>
        <</if>> <!-- End check for division having recipes and being active -->

      <</for>> <!-- End of division processing loop -->
    <<else>>
      <<run console.log("Corporation is inactive. Skipping:", _currentCorp.CorpName)>>
    <</if>> <!-- End check for corporation being active -->

  <</for>> <!-- End of corporation processing loop -->
<</for>> <!-- End of daily processing loop -->

/* Update the last processing time to the current time */
<<set $CorporationPlayerBusinessLastTime to new Date(_currentTime.getTime())>>
<<run console.log("Updated last processing time to:", $CorporationPlayerBusinessLastTime)>>
<<else>>
/* Log if no processing is done due to insufficient time passage */
<<run console.log("Less than a day has passed. Skipping corporation cycle processing.")>>
<</if>>
<</widget>>



:: CreateSystemWidget [widget nobr]
<<widget "CreateSystem">>
  /* Initialize $Systems if it's not already an array */
  <<if not Array.isArray($Systems)>>
    <<set $Systems = []>>
  <</if>>

  /* Clone the System Template */
  <<set _system = clone(setup.SystemTemplate)>>

  /* Assign arguments to system properties with additional debugging */
  <<for _i = 0; _i < $args.length; _i++>>
    <<run console.log("Arg " + _i + ": " + $args[_i])>>
  <</for>>
  
  <<set _system.SystemName to $args[0]>>
  <<set _system.SystemType to $args[1]>>
  <<set _system.FactionOwner to $args[2]>>
  <<set _system.DevelopmentLevel to $args[3]>>
  <<set _system.DangerLevel to $args[4]>>
  <<set _system.EconomyLevel to $args[5]>>
  <<set _system.Population to $args[6]>>
  <<set _system.SunType to $args[7]>>
  <<set _system.SunOutput to $args[8]>>

  /* Debugging: Log the final system object */
  <<run console.log("System object before adding to $Systems:", _system)>>

  /* Add the new system to the $Systems array */
  <<set $Systems.push(_system)>>

  /* Additional Debugging: Log the updated $Systems array */
  <<run console.log("$Systems array after adding new system:", $Systems)>>
<</widget>>








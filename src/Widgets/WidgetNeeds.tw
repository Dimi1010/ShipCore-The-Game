:: widget needs [widget nobr] {"position":"175,575","size":"100,100"}
<<widget "manageNeeds">>
    /* Check if $lastUpdateTime is set; if not, initialize it */
    <<if typeof $lastUpdateTime === "undefined">>
        <<set $lastUpdateTime = new Date($gameDate.getTime())>> /* Initialize with the current game time */
    <</if>>

    /* Calculate the time difference in minutes since the last update */
    <<set _currentTime = new Date($gameDate.getTime())>> /* Get the current game time */
    <<set _timeDifference = (_currentTime.getTime() - $lastUpdateTime.getTime()) / 60000>> /* Calculate the difference in minutes */

    /* Apply changes to stats based on the elapsed time, but only if at least 5 minutes have passed */
    <<if _timeDifference >= 5>>
        /* Calculate the adjustment factor using an exponential curve */
        <<set _maxDecay = 500>> /* Adjusted maximum decay for complete depletion in 24 hours */
        <<set _halfLife = 360>> /* Adjusted half-life to 60 minutes for a faster decay rate */
        <<set _adjustmentFactor = _maxDecay * (1 - Math.exp(-0.693 * _timeDifference / _halfLife))>>
        /* This limits the adjustment factor based on an exponential decay curve */
        /* Calculate the carcinogen impact factor */
        <<set _carcinogenFactor = 1 + ($player.carcinogen / 100) * 9>>

        <<set _reducedFactor = _adjustmentFactor / 122>>
        <<set $player.health = Math.clamp($player.health - _reducedFactor, 0, 1000)>>
        <<set $player.mood = Math.clamp($player.mood - _reducedFactor, 0, 1000)>>
        <<set $player.trauma = Math.clamp($player.trauma + _reducedFactor, 0, 1000)>>
        <<set $player.stress = Math.clamp($player.stress + _reducedFactor, 0, 1000)>>

        /* Apply changes to fatigue and filth with consideration for carcinogen factor (faster increase) */
        <<set _fatigueFilthIncreaseFactor = (_adjustmentFactor * _carcinogenFactor)>>
        <<set $player.fatigue = Math.clamp($player.fatigue + _fatigueFilthIncreaseFactor, 0, 1000)>>
        <<set $player.filth = Math.clamp($player.filth + (_adjustmentFactor / 2), 0, 1000)>>

        /* Carcinogen adjustment: reduce by 1 point per hour */
        <<set _carcinogenReduction = Math.floor(_timeDifference / 60)>>
        <<set $player.carcinogen = Math.max($player.carcinogen - _carcinogenReduction, 0)>>
    <</if>>


/* Ensure that $eventStack is initialized at the start of the game. */
<<if typeof $eventStack === "undefined">>
    <<set $eventStack to []>>
<</if>>

/* Ensure that $lastUpdateTime is initialized at the start of the game. */
<<if typeof $lastUpdateTime === "undefined">>
    <<set $lastUpdateTime to 0>>
<</if>>

/* Set the breakdown condition based on the player's stats. */
<<set _breakdownCondition = ($player.health < 50) || ($player.mood < 50) || ($player.trauma > 950) || ($player.stress > 950) || ($player.fatigue > 950) || ($player.filth > 950)>>

/* If the breakdown condition is met and there is not already a breakdown, add the event. */
<<if _breakdownCondition && !$breakdown>>
    <<set $breakdown = true>>
<<elseif !_breakdownCondition && $breakdown>>
    <<set $breakdown = false>>
<</if>>

/* Update the last update time for the next check */
<<set $lastUpdateTime to _currentTime>>  /* Store the current time for the next update */




<</widget>>
